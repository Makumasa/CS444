@misc{			JobObjects,
author 			= {},
title 			= {Job Objects (Windows)},
howpublished	= {\url{https://msdn.microsoft.com/en-us/library/windows/desktop/ms684161(v=vs.85).aspx}},
month 			= {},
year 			= {},
note 			= {(Accessed on 10/26/2017)}
}

@book{			WindowsInternals,
author 			= {Russinovich, Mark and Solomon, David A. and Ionescu, Alex},
title 			= {Windows Internals Part 1},
edition 		= {6},
publisher		= {Microsoft Press},
address 		= {Redmond, Washington},
year 			= {2012}
}

@book{			WindowsInternals2,
author 			= {Russinovich, Mark and Solomon, David A. and Ionescu, Alex},
title 			= {Windows Internals Part 2},
edition 		= {6},
publisher		= {Microsoft Press},
address 		= {Redmond, Washington},
year 			= {2012}
}

@book{			FreeBSD,
author 			= {McKusick, Marshall Kirk and Neville-Neil, George V. and Watson, Robert N. M.},
title 			= {The Design and Implementation of the FreeBSD Operating System},
edition 		= {2},
publisher		= {Addison-Wesley Professional},
year 			= {2014}
}

@misc{			WindowsProcesses,
author 			= {},
title 			= {Processes and Threads (Windows)},
howpublished 	= {\url{https://msdn.microsoft.com/en-us/library/windows/desktop/ms684841(v=vs.85).aspx}},
month 			= {},
year 			= {},
note 			= {(Accessed on 10/26/2017)}
}

@misc{			FreeBSDThreadStates,
author 			= {Gregg, Brendan},
title 			= {FreeBSD 2014 Flame Graphs},
howpublished 	= {\url{https://www.slideshare.net/brendangregg/freebsd-2014-flame-graphs}},
month 			= {November},
year 			= {2013},
note 			= {(Accessed on 10/26/2017)}
}

@misc{			WindowsVsLinux,
author 			= {Lluis, Xose},
title 			= {Deploy to nenyures: Windows vs Linux: Processes and Threads},
howpublished 	= {\url{http://deploytonenyures.blogspot.com/2013/10/windows-vs-linux-processes-and-threads.html}},
month 			= {October},
year 			= {2013},
note 			= {(Accessed on 10/26/2017)}
}

@book{			LinuxKernel,
author 			= {Bovet, Daniel P. and Cesati, Marco},
title 			= {Understanding the Linux Kernel},
edition 		= {3},
publisher 		= {O'Reilly},
year 			= {2005}
}

@misc{			LinuxSlides,
author 			= {Ben-Yossef, Gilad},
title 			= {On Threads, Processes and Co-Processes},
publisher 		= {Codefidence},
howpublished 	= {\url{https://elinux.org/images/1/1c/Ben-Yossef-GoodBadUgly.pdfl}},
year 			= {2009}
}

@misc{			CFS,
author 			= {},
title 			= {Inside the Linux 2.6 Completely Fair Scheduler},
howpublished 	= {\url{https://www.ibm.com/developerworks/library/l-completely-fair-scheduler/}},
month 			= {},
year 			= {},
note 			= {(Accessed on 10/26/2017)}
}

@misc{			LinuxBlockIOLecture,
author 			= {Traeger, Avishay},
title 			= {An Introduction to Linux Block I/O},
howpublished 	= {\url{http://researcher.ibm.com/researcher/files/il-AVISHAY/01-block_io-v1.3.pdf}},
month 			= {October},
year 			= {2012},
note 			= {(Accessed on 11/10/2017)}
}

@misc{			LinuxNOOP,
author 			= {},
title 			= {6.4.3. Noop - Red Hat Customer Portal},
howpublished 	= {\url{https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/performance_tuning_guide/ch06s04s03}},
month 			= {},
year 			= {},
note 			= {(Accessed on 11/10/2017)}
}

@misc{ 			LinuxCFQ,
author			= {},
title			= {CFQ (Complete Fairness Queueing)},
howpublished	= {\url{https://www.kernel.org/doc/Documentation/block/cfq-iosched.txt}},
month			= {},
year			= {},
note			= {(Accessed on 11/10/2017)}
}

@misc{ 			LinuxDeadline,
author			= {},
title			= {6.4.2. Deadline - Red Hat Customer Portal},
howpublished	= {\url{https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/performance_tuning_guide/ch06s04s02}},
month			= {},
year			= {},
note			= {(Accessed on 11/10/2017)}
}

@misc{ 			LinuxBFQ,
author			= {Torvalds, Linus},
title			= {BFQ (Budget Fair Queueing)},
howpublished	= {\url{https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/block/bfq-iosched.txt}},
month			= {July},
year			= {2017},
note			= {(Accessed on 11/10/2017)}
}

@misc{ 			LinuxKyber,
author			= {Corbet, Jonathan},
title			= {Two new block I/O schedulers for 4.12},
howpublished	= {\url{https://lwn.net/Articles/720675/}},
month			= {April},
year			= {2017},
note			= {(Accessed on 11/10/2017)}
}

@misc{			LinuxDataStructures,
author 			= {Bethencourt, Luis},
title 			= {Basic Data Structures and Algorithms in the Linux Kernel},
howpublished 	= {\url{http://luisbg.blogalia.com/historias/74062}},
month 			= {},
year 			= {2015},
note 			= {(Accessed on 11/10/2017)}
}

@misc{ 			LinuxCrypto,
author			= {Mueller, Stephan and Vasut, Marek},
title			= {Linux Kernel Crypto API},
howpublished	= {\url{http://www.chronox.de/crypto-API/crypto/index.html}},
month			= {},
year			= {2016},
note			= {(Accessed on 11/10/2017)}
}

@TECHREPORT{      FreeBSDIOSched,
  AUTHOR =        {Losh, Warner M.},
  TITLE =         {I/O Scheduling in FreeBSD's CAM Subsystem},
  ADDRESS =       {Los Gatos, California},
  ABSTRACT =      {FreeBSD’s default I/O scheduling policy strives for a
general purpose performance across a wide range of applications
and media types. Its scheduler does not allow some I/O requests
to be given priority over others. It makes no allowances for write
amplification in flash devices. GEOM level scheduling is available,
but it is limited in what it provides. It is too high in the stack
to allow precise control over I/O access patterns. A scheduler in
Common Access Method (CAM) can exploit characteristics of the
device to precisely control I/O patterns to improve performance.
At Netflix, we found that limiting write requests to the drive
limited the effects of write amplification on read latency. In
addition, we found that favoring reads over writes improves
average read latency, but does not fix extreme outliers.
Updates to the software since this paper was written can be
found in an appendix. The changes in code and evolution of the
understanding of what conclusions can be drawn haven’t been
integrated through the whole paper as yet.
                   },
  PAGES =         {9},
  URL   =         {https://people.freebsd.org/~imp/bsdcan2015/iosched-v3.pdf}
}

@TECHREPORT{      FreeBSDCrypto2,
  AUTHOR =        {Leffler, Samuel J.},
  TITLE =         {Cryptographic Device Support for FreeBSD},
  ABSTRACT =      {FreeBSD recently adopted the OpenBSD Cryptographic Framework [Keromytis et al, 2003]. In
doing so it was necessary to convert the core framework to function correctly in a fully-preemptive/multiprocessor
operating system environment. In addition several issues with the basic
design were found to cause significant performance loss. After addressing these issues we found
that FreeBSD outperformed OpenBSD on identical hardware by as much as 100% in tests that
exercise only the cryptographic framework. These optimizations result in similar performance
improvements for facilities like IPsec that make heavy use of the cryptographic framework. We
observed that FreeBSD’s Fast IPsec [Leffler, 2003] typically outperforms OpenBSD’s IPsec
implementation [Miltchev et al, 2002] by more than 50% on identical hardware.
We conclude that the OCF cryptographic API can be optimized and re-tuned to deliver substantially
better performance than the original OCF implementation with large gains in both throughput
and latency. Moreover these changes can be made with no impact on clients of the cryptographic
framework: both user and kernel sofware designed for the original OCF is easily ported
to the FreeBSD implementation of OCF.
                   },
  PAGES =         {9},
  URL   =         {http://www.usenix.net/legacy/events/bsdcon03/tech/leffler_crypto/leffler_crypto.pdf}
}

@misc{FreeBSDDataStructures,
author = {},
title = {afiskon/c-algorithms: Collection of BSD/MIT-licensed algorithms implementations in pure C},
howpublished = {\url{https://github.com/afiskon/c-algorithms}},
month = {},
year = {},
note = {(Accessed on 11/10/2017)}
}

@misc{FreeBSDCrypto,
author = {},
title = {crypto(9)},
howpublished = {\url{https://www.freebsd.org/cgi/man.cgi?query=crypto&sektion=9}},
month = {},
year = {},
note = {(Accessed on 11/10/2017)}
}

@misc{WindowsIO,
author = {},
title = {Overview of the Windows I/O Model | Microsoft Docs},
howpublished = {\url{https://docs.microsoft.com/en-us/windows-hardware/drivers/kernel/overview-of-the-windows-i-o-model}},
month = {},
year = {},
note = {(Accessed on 11/10/2017)}
}

@misc{WindowsLanguage,
author = {},
title = {What Programming Language is Windows written in?},
howpublished = {\url{https://social.microsoft.com/Forums/en-US/65a1fe05-9c1d-48bf-bd40-148e6b3da9f1/what-programming-language-is-windows-written-in?forum=windowshpcacademic}},
month = {},
year = {},
note = {(Accessed on 11/10/2017)}
}

@misc{Hugepages,
author = {Coker, Russell},
title = {Hugepages - Debian Wiki},
howpublished = {\url{https://wiki.debian.org/Hugepages}},
month = {},
year = {},
note = {(Accessed on 11/18/2017)}
}

@TECHREPORT{	Comparison1,
AUTHOR 			= {Khetan, Gaurang},
TITLE 			= {Comparison of Memory Management Systems of BSD, Windows, and Linux},
ADDRESS 		= {Los Angeles, California},
ABSTRACT 		= {This paper is a study of memory management systems of an operating system. We begin with a brief introduction to memory management systems and then we
compare the memory management systems of real life
operating systems - BSD4.4, Windows 2000 and
Linux 2.4},
PAGES 			= {11},
URL 			= {http://gaurang.org/academics/csci555/termpaper2.pdf}
}

@TECHREPORT{	Comparison2,
AUTHOR 			= {Dube, Rohit},
TITLE 			= {A Comparison of the Memory Management
sub-systems in FreeBSD and Linux},
ADDRESS 		= {University of Maryland
College Park,MD 20742},
ABSTRACT 		= {In this article we seek to compare the memory management sub-systems of two popular and freely available operating systems -FreeBSD and Linux.First a framework is developed,spelling out the components of a generic and modern memory management system.The framework is then used in a design level comparison of memory management in the two operating systems.},
PAGES 			= {6},
URL 			= {https://pdfs.semanticscholar.org/eb3c/aa5e870fdcb525abf7ed5ca40f58cbb007a3.pdf}
}

@misc{CollectMemoryInfo,
author = {},
title = {Collecting Memory Usage Information For a Process (Windows)},
howpublished = {\url{https://msdn.microsoft.com/en-us/library/windows/desktop/ms682050(v=vs.85).aspx}},
month = {},
year = {},
note = {(Accessed on 11/19/2017)}
}
